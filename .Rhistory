require("shiny")
shiny::runApp()
library(shiny)
version
install.packages("quantmod")
library("quantmod")
getSymbols("YHOO")
eval("YHOO")
?eval
get("YHOO")
chartSeries("YHOO")
chartSeries(YHOO)
chartSeries(get("YHOO"))
chartSeries(get("YHOO"), log.scale = T, subset = "last 1 year")
chartSeries(get("YHOO"), log.scale = T, subset = "last 1 years")
chartSeries(get("YHOO"), log.scale = T, subset = "last 12 months")
chartSeries(get("YHOO"), log.scale = T, subset = "last 365 days")
chartSeries(get("YHOO"), log.scale = T, subset = "last 252 days")
chartSeries(get("YHOO"), log.scale = T, subset = "last 253 days")
chartSeries(get("YHOO"), log.scale = T, subset = "last 253 days", title = "Yahoo")
chartSeries(get("YHOO"), log.scale = T, subset = "last 253 days", name = "Yahoo")
chartSeries(get("YHOO"), subset = "last 253 days", name = "Yahoo")
chartSeries(get("YHOO"), log.scale = T, subset = "last 13 months")
chartSeries(get("YHOO"), log.scale = T, subset = "last 13 months", type="line")
chartSeries(get("YHOO"), log.scale = T, subset = "last 13 months", type="bars")
chartSeries(get("YHOO"), log.scale = T, subset = "last 13 months", type="bars", name="Yahoo", minor.ticks = F)
chartSeries(get("YHOO"), log.scale = T, subset = "last 13 months", type="bars", name="Yahoo", minor.ticks = F, show.grid = T)
chartSeries(get("YHOO"), log.scale = T, subset = "last 13 months", type="bars", name="Yahoo", minor.ticks = F, show.grid = F)
chartSeries(get("YHOO"), log.scale = T, subset = "last 13 months", type="bars", name="Yahoo", minor.ticks = F, theme = chartTheme("white"))
chartSeries(get("YHOO"), log.scale = T, subset = "last 13 months", type="bars", name="Yahoo", minor.ticks = F, theme = chartTheme("grey"))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
date
date()
install.packages("lubridate")
library("lubridate", lib.loc="~/R/win-library/3.1")
ymd(c(year(date()), month(date()), day(date())))
shiny::runApp()
FromDate <- today()
year(FromDate)
year(FromDate) <- year(FromDate) - 1
class(FromDate)
shiny::runApp()
shiny::runApp()
class(class(FromDate))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
as.character(FromDate)
class(Sys.Date())
class(FromDate)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
rm("YHOO")
rm("FromDate")
shiny::runApp()
getSymbols("YHOO")
View(YHOO)
getSymbols("AAPL")
View(AAPL)
chartSeries(get("AAPL"), log.scale = T, subset = "last 13 months", type="line", minor.ticks = F, show.grid = T)
chartSeries(get("AAPL")$AAPL.Adjusted, log.scale = T, subset = "last 13 months", type="line", minor.ticks = F, show.grid = T)
chartSeries(get("AAPL")$AAPL.Adjusted, log.scale = T, subset = "last 13 months", type="bars", minor.ticks = F, show.grid = T)
str(AAPL)
AAPL[6]/AAPL[4]
AAPL$Data[6]/AAPL$Data[4]
AAPL$Data[,6]/AAPL$Data[,4]
AAPL[,6]/AAPL[,4]
getSplits("AAPL", auto.update = T)
View(AAPL)
getSplits(AAPL, auto.update = T)
View(AAPL)
shiny::runApp()
Results <- get("AAPL")
Adjustments <- Results[, 6] / Results[, 4]
Results[, 1] <- Results[, 1] * Adjustments
Results[, 2] <- Results[, 2] * Adjustments
Results[, 3] <- Results[, 3] * Adjustments
Results[, 4] <- Results[, 4] * Adjustments
chartSeries(Results)
rm(Results)
adjustOHLC(AAPL)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
NULL[1:10]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("PerformanceAnalytics")
library("PerformanceAnalytics")
table.CalendarReturns(AAPL)
table.CalendarReturns(AAPL[,4])
hist(AAPL[,4])
View(AAPL)
charts.PerformanceSummary(AAPL[,4], colorset=rich6equal, lwd=2, ylog=TRUE)
Returns <- ln(AAPL[-1, 4]/AAPL[-nrow(AAPL), 4])
Returns <- log(AAPL[-1, 4]/AAPL[-nrow(AAPL), 4])
hist(Returns)
hist(AAPL[, 4])
hist(AAPL[, 4])
hist(AAPL[, 6])
Returns <- log(AAPL[-1, 6]/AAPL[-nrow(AAPL), 6])
hist(Returns)
hist(Returns)
Returns
nrow(AAPL)
head(AAPL[-1, 6])
head(AAPL[-nrow(AAPL), 6])
head(AAPL[-1, 6]/AAPL[-nrow(AAPL), 6])
head(AAPL[-1, 6]-AAPL[-nrow(AAPL), 6])
hist(dailyReturn(AAPL))
Returns <- dailyReturn(AAPL)
charts.PerformanceSummary(Returns, colorset=rich6equal, lwd=2, ylog=TRUE)
SP500 <- getSymbols("^SPYC")
SP500 <- getSymbols("^GSPC")
SP500Returns <- dailyReturns(SP500)
SP500Returns <- dailyReturn(SP500)
GSPCReturns <- dailyReturn(GSPC)
charts.PerformanceSummary(c(Returns, GSPCReturns), colorset=rich6equal, lwd=2, ylog=TRUE)
charts.PerformanceSummary(c(GSPCReturns), colorset=rich6equal, lwd=2, ylog=TRUE)
charts.PerformanceSummary(cbind(Returns, GSPCReturns), colorset=rich6equal, lwd=2, ylog=TRUE)
charts.PerformanceSummary(cbind(Returns, GSPCReturns), colorset=rich5equal, lwd=2, ylog=TRUE)
charts.PerformanceSummary(cbind(Returns, GSPCReturns), colorset=rich6equal[-1], lwd=2, ylog=TRUE)
shiny::runApp()
shiny::runApp()
adjustOHLC(AAPL)
AAPL <- adjustOHLC(AAPL)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?charts.PerformanceSummary
charts.PerformanceSummary(cbind(Returns, GSPCReturns), colorset=rich6equal[-1], lwd=2, ylog=TRUE, cex=2)
shiny::runApp()
charts.PerformanceSummary(cbind(Returns, GSPCReturns), colorset=rich6equal[-1], lwd=2, ylog=TRUE)
charts.PerformanceSummary(cbind(Returns, GSPCReturns), colorset=rich6equal[-1], lwd=2, ylog=TRUE, bg="black")
charts.PerformanceSummary(cbind(Returns, GSPCReturns), colorset=rich6equal[-1], lwd=2, ylog=TRUE, cex.label=2)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
install.packages("Rtools")
install.packages("rtools")
shinyapps::setAccountInfo(name='graeme', token='360B234ACF88CF7D9A45B7792A9D0A98', secret='WmMfIIDY8gLP5v16bp0ino295Nt8QbEdjPorRU/s')
version
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages(c("BradleyTerry2", "car", "caret", "cluster", "colorspace", "digest", "ggplot2", "ipred", "lava", "manipulate", "prodlim", "RColorBrewer", "Rcpp", "RcppEigen", "reshape2"))
?knitr
install.packages("knitr")
shiny::runApp()
*chart.PerformanceSummary* is used to produce a three panel graph with
file.edit(".Rprofile")
show
getMethod
showMethods
?getMethod
